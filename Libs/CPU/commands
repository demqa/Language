// MY DSL

#define POP       StackPop(&cpu->stack)
#define PUSH(arg) StackPush(&cpu->stack, (arg))
#define CMD_FLAGS_ARE(arg) ((command & (arg)) == (arg))

DEF_CMD(HLT, 0x00, 0,
    {
        DestructCPU(cpu);
        printf("end\n");
        return 0;
    }
)

DEF_CMD(PUSH, 0x01, 1,
    {
        if (CMD_FLAGS_ARE(OSU | REG | IMM))
        {
            ASSIGN_AND_GO_NEXT(reg_num, RegNum);
            ASSIGN_AND_GO_NEXT(index,   size_t);

        //    sleep(500);
            PUSH(cpu->RAM[(size_t)cpu->regs[reg_num] + index]);
        }
        else
        if (CMD_FLAGS_ARE(REG | OSU))
        {
            ASSIGN_AND_GO_NEXT(reg_num, RegNum);

        //    sleep(500);
            PUSH(cpu->RAM[(size_t)cpu->regs[reg_num]]);
        }
        else
        if (CMD_FLAGS_ARE(OSU))
        {
            ASSIGN_AND_GO_NEXT(index, size_t);

        //    sleep(500);
            PUSH(cpu->RAM[index]);
        }
        else
        if (CMD_FLAGS_ARE(REG))
        {
            ASSIGN_AND_GO_NEXT(reg_num, RegNum);

            PUSH(cpu->regs[reg_num]);
        }
        else
        if (CMD_FLAGS_ARE(IMM))
        {
            ASSIGN_AND_GO_NEXT(num, Elem_t);

            PUSH(num);
        }
        else
        {
            perror("HOW DOES IT FEEL TO GO WHERE IS NOT ALLOWED");
            DestructCPU(cpu);
            return 0;
        }
    }
)

DEF_CMD(POP, 0x02, 1,
    {
        if (CMD_FLAGS_ARE(OSU | REG | IMM))
        {
            ASSIGN_AND_GO_NEXT(reg_num, RegNum);
            ASSIGN_AND_GO_NEXT(index,   size_t);

        //    sleep(500);
            cpu->RAM[(size_t)cpu->regs[reg_num] + index] = POP;
        }
        else
        if (CMD_FLAGS_ARE(REG | OSU))
        {
            ASSIGN_AND_GO_NEXT(reg_num, RegNum);

        //    sleep(500);
            cpu->RAM[(size_t)cpu->regs[reg_num]] = POP;
        }
        else
        if (CMD_FLAGS_ARE(OSU))
        {
            ASSIGN_AND_GO_NEXT(index, size_t);

        //    sleep(500);
            cpu->RAM[index] = POP;
        }
        else
        if (CMD_FLAGS_ARE(REG))
        {
            ASSIGN_AND_GO_NEXT(reg_num, RegNum);

            cpu->regs[reg_num] = POP;
        }
        else
        {
            perror("HOW DOES IT FEEL TO GO WHERE IS NOT ALLOWED");
            DestructCPU(cpu);
            return 0;
        }
    }
)
 
DEF_CMD(ADD, 0x03, 0,
    {
        PUSH(POP + POP);
    }
)

DEF_CMD(MUL, 0x04, 0,
    {
        PUSH(POP * POP);
    }
)

DEF_CMD(SUB, 0x05, 0,
    {
        Elem_t __X_DONT_RENAME__ = 0;
        __X_DONT_RENAME__ -= POP;
        __X_DONT_RENAME__ += POP;

        if (isnan(__X_DONT_RENAME__))
        {
            PROCESSING_ERROR(WRONG_SEQ_OF_COMMANDS_STACK_POPPING_WHEN_EMPTY);
        }
        
        PUSH(__X_DONT_RENAME__);
    }
)

DEF_CMD(DIV, 0x06, 0,
    {
        Elem_t __X_DONT_RENAME__ = 1;
        __X_DONT_RENAME__ /= POP;
        __X_DONT_RENAME__ *= POP;

        if (isnan(__X_DONT_RENAME__))
        {
            PROCESSING_ERROR(WRONG_SEQ_OF_COMMANDS_STACK_POPPING_WHEN_EMPTY);
        }

        PUSH(__X_DONT_RENAME__);
    }
)

DEF_CMD(OUT, 0x07, 0,
    {
        Elem_t __X_DONT_RENAME__ = StackTop(&cpu->stack);

        if (isnan(__X_DONT_RENAME__))
        {
            PROCESSING_ERROR(WRONG_SEQ_OF_COMMANDS_STACK_TOP_WHEN_EMPTY);
        }

        // sleep(666);
        printf("top = %lf\n", __X_DONT_RENAME__);
    }
)

DEF_CMD(DUMP, 0x08, 0,
    {
        // TODO
        // StackDump(&cpu->stack);
        printf("dump\n");
    }
)

DEF_CMD(MEOW, 0x1F, 0,
    {
        printf("meow :3\n");
    }
)

DEF_CMD(IN, 0x1E, 0,
    {
        Elem_t __X_DONT_RENAME__ = NAN;
        scanf("%lf", &__X_DONT_RENAME__);

        if (isnan(__X_DONT_RENAME__))
        {
            PROCESSING_ERROR(IN_ERROR_ARG_IS_NAN);
        }

        PUSH(__X_DONT_RENAME__);
    }
)

DEF_CMD(RET, 0x18, 0,
{
    ip = cpu->code + (size_t)POP;
}
)

DEF_JMP(JMP,  0x10, || 1 ||)
DEF_JMP(JA,   0x11, >)
DEF_JMP(JAE,  0x12, >=)
DEF_JMP(JE,   0x13, ==)
DEF_JMP(JBE,  0x14, <)
DEF_JMP(JB,   0x15, <=)
DEF_JMP(JNE,  0x16, !=)
DEF_JMP(CALL, 0x17, || 1 ||)

#undef DEF_JMP
#undef DEF_CMD

#undef POP
#undef PUSH
#undef CMD_FLAGS_ARE
