    
GLOBAL _start

    SECTION .text
    
_start:
    add rsp, -64
    mov r15, rsp
    call main
    add rsp, 64
    

    mov rax, 0x3C
    xor rdi, rdi
    syscall
    
;;--------------------------

    
sqrt:
    push rbp
    mov rbp, rsp
    

    sub rsp, 8
    
    mov rax, 0
    mov [rbp-8], rax
    

    
while_1:
    mov rax, [rbp-8]
    push rax
    mov rax, [rbp-8]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    imul rbx
    

    push rax
    mov rax, [rbp+16]
    push rax
    pop rbx
    pop rcx
    cmp rcx, rbx
    ja while_end_1
    

    mov rax, [rbp-8]
    push rax
    mov rax, 1
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    add rax, rbx
    

    mov [rbp-8], rax
    

    jmp while_1
    

    
while_end_1:
    mov rax, [rbp-8]
    push rax
    mov rax, 1
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    sub rax, rbx
    

    mov rsp, rbp
    pop rbp
    ret
    

    
Kvadratka:
    push rbp
    mov rbp, rsp
    

    sub rsp, 40
    
    
;; empty mark IF number 1
    mov rax, [rbp+16]
    push rax
    mov rax, 0
    push rax
    pop rbx
    pop rcx
    cmp rcx, rbx
    jne if_end_1
    

    mov rax, 0
    push rax
    mov rax, 999
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    sub rax, rbx
    

    mov rsi, r15
    call print
    mov rax, 1
    mov rsp, rbp
    pop rbp
    ret
    

    
if_end_1:
    mov rax, [rbp+24]
    push rax
    mov rax, [rbp+24]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    imul rbx
    

    push rax
    mov rax, 4
    push rax
    mov rax, [rbp+16]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    imul rbx
    

    push rax
    mov rax, [rbp+32]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    imul rbx
    

    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    sub rax, rbx
    

    mov [rbp-8], rax
    

    mov rax, [rbp-8]
    mov rsi, r15
    call print
    
;; empty mark IF number 2
    mov rax, [rbp-8]
    push rax
    mov rax, 0
    push rax
    pop rbx
    pop rcx
    cmp rcx, rbx
    jae if_end_2
    

    mov rax, 0
    push rax
    mov rax, 777
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    sub rax, rbx
    

    mov rsi, r15
    call print
    mov rax, 2
    mov rsp, rbp
    pop rbp
    ret
    

    
if_end_2:
    mov rax, 0
    mov [rbp-16], rax
    

    mov rax, [rbp-8]
    push rax
    

    call sqrt
    

    pop rbx
    

    mov [rbp-24], rax
    

    mov rax, [rbp-24]
    mov rsi, r15
    call print
    
;; empty mark IF number 3
    mov rax, [rbp-24]
    push rax
    mov rax, 0
    push rax
    pop rbx
    pop rcx
    cmp rcx, rbx
    jne if_end_3
    

    mov rax, 0
    push rax
    mov rax, [rbp+24]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    sub rax, rbx
    

    push rax
    mov rax, 2
    push rax
    mov rax, [rbp+16]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    imul rbx
    

    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    idiv rbx
    

    mov [rbp-16], rax
    

    mov rax, [rbp-16]
    mov rsi, r15
    call print
    mov rax, 3
    mov rsp, rbp
    pop rbp
    ret
    

    
if_end_3:
    mov rax, 0
    push rax
    mov rax, [rbp+24]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    sub rax, rbx
    

    push rax
    mov rax, [rbp-24]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    add rax, rbx
    

    push rax
    mov rax, 2
    push rax
    mov rax, [rbp+16]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    imul rbx
    

    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    idiv rbx
    

    mov [rbp-32], rax
    

    mov rax, 0
    push rax
    mov rax, [rbp+24]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    sub rax, rbx
    

    push rax
    mov rax, [rbp-24]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    sub rax, rbx
    

    push rax
    mov rax, 2
    push rax
    mov rax, [rbp+16]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    imul rbx
    

    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    idiv rbx
    

    mov [rbp-40], rax
    

    mov rax, [rbp-32]
    mov rsi, r15
    call print
    mov rax, [rbp-40]
    mov rsi, r15
    call print
    mov rax, 0
    mov rsp, rbp
    pop rbp
    ret
    

    
FUCK:
    push rbp
    mov rbp, rsp
    

    sub rsp, 0
    
    
;; empty mark IF number 4
    mov rax, [rbp+16]
    push rax
    mov rax, 1
    push rax
    pop rbx
    pop rcx
    cmp rcx, rbx
    ja if_end_4
    

    mov rax, 1
    mov rsp, rbp
    pop rbp
    ret
    

    
if_end_4:
    mov rax, [rbp+16]
    push rax
    mov rax, 1
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    sub rax, rbx
    

    push rax
    

    call FUCK
    

    pop rbx
    

    push rax
    mov rax, [rbp+16]
    push rax
    pop rbx
    pop rcx
    mov rax, rcx
    cqo
    imul rbx
    

    mov rsp, rbp
    pop rbp
    ret
    

    
main:
    push rbp
    mov rbp, rsp
    

    sub rsp, 24
    
    mov rax, 0
    mov [rbp-8], rax
    

    mov rax, 0
    mov [rbp-16], rax
    

    mov rax, 0
    mov [rbp-24], rax
    

    mov rsi, r15
    call scan
    mov [rbp-8], rax
    

    mov rsi, r15
    call scan
    mov [rbp-16], rax
    

    mov rsi, r15
    call scan
    mov [rbp-24], rax
    

    mov rax, [rbp-24]
    push rax
    mov rax, [rbp-16]
    push rax
    mov rax, [rbp-8]
    push rax
    

    call Kvadratka
    

    pop rbx
    pop rbx
    pop rbx
    

    mov rax, 0
    mov rsp, rbp
    pop rbp
    ret
    

